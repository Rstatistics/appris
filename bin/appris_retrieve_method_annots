#!/bin/bash

# -----------------------------------------------------------------------------
# Local variables
VER=0.1b
VERDATE="1-Apr-2013"

FILENAME=`basename $0`
FILENAME="${FILENAME%.*}"
DIRNAME=`dirname $0`

CONF_DB=""
CONF_SPECIES=""
METHOD=""
OUTPUT_FILENAME=""
LOG_LEVEL=""

# -----------------------------------------------------------------------------
# Load external functions
source ${DIRNAME}/appris_env

# -----------------------------------------------------------------------------
# Usage

USAGE="
\n
 APPRIS's binary package.\n
\n
 Name:\n
\t appris_retrieve_method_annots\n
\n
 Description:\n
\t Exports annotations for the following method\n
\t\t* Matador3D: list of pdb's, and coordinate alignments (at the moment, it's reported cds coordinates).\n	
\t\t* SPADE: list of domains, and alignment coordinates.\n
\t\t* INERTIA: list of exons and the best score of slr (omega), the smaller score.\n
\n
 Required arguments:\n
\t -d [-dbconf]\n
\t\t INI file for database configuration\n
\n
\t -c [-conf]\n
\t\t Source file with env variables for the input dataset\n
\n
\t -m [-method]\n
\t\t matador3d\n
\t\t spade\n
\t\t inertia\n
\n
 \t -o [-out]\n
\t\t Output file name\n
\t\t data/g15.v3.15Jul2013/appris_data.spade_annot.homo_sapiens.txt\n
\n
\t -l, -loglevel\n
\t\t info\n
\t\t debug\n
\n
\t -v [-version]\n
\t -h [-help]\n
\n
\n
 Author: Jose Manuel Rodriguez Carrasco -jmrodriguez@cnio.es- (INB-GN2,CNIO)\n
\n
"

# -----------------------------------------------------------------------------
# Get input parameters

while expr "//$1" : //- >/dev/null
do
	case "$1" in
		-d | -dbconf )
			CONF_DB=$2
			shift
			;;
		-c | -conf )
			CONF_SPECIES=$2
			shift
			;;
		-m | -method )
			case "$2" in
				matador3d | spade | inertia )      
					METHOD=$2
					;;
				* )
					echo Unknown method name: "$2" 
					echo -e $USAGE
					exit 1
					;;
			esac
			shift
			;;
		-o | -out )
        	OUTPUT_FILENAME=$2
			shift
			;;
		-l | -loglevel )
			case "$2" in
				info | debug )
		        	LOG_LEVEL=$2
					;;
				* )
					echo Unknown loglevel: "$2" 
					echo -e $USAGE
					exit 1
					;;
			esac
			shift
			;;			
		-h | -help )
			echo -e $USAGE		
			exit
			;;
		-v | -version )
			echo "$VER", "$VERDATE"
			exit
			;;
		* )
			echo Unknown option: "$1"
			echo -e $USAGE
			exit 1
			;;
	esac
	shift
done

if [ "${CONF_DB}" == "" ]; then
	echo You must specify the config file INI of database!
	echo -e $USAGE
	exit 1
fi

if [ "${CONF_SPECIES}" == "" ]; then
	echo You must specify at least one config file for SPECIES!
	echo -e $USAGE
	exit 1
fi

if [ "${METHOD}" == "" ]; then
	echo You must specify at least one method!
	echo -e $USAGE
	exit 1
fi

if [ "${OUTPUT_FILENAME}" == "" ]; then
	echo You must specify the output filename!
	echo -e $USAGE
	exit 1
fi

# -----------------------------------------------------------------------------
# Prepare Environment from config file for SPECIES
load_appris_specie_env "${CONF_SPECIES}" "verbose"

# -----------------------------------------------------------------------------
# Get method script name
METHOD_SCRIPT="retrieve_method_annots"

# -----------------------------------------------------------------------------
# Required var declarations
if [ "${APPRIS_SPECIES}" != "" ]; then
	SPECIES_ID=$(echo ${APPRIS_SPECIES} | tr "[:upper:]" "[:lower:]" | sed 's/ /_/')
else
	echo Error within env variables: APPRIS_SPECIES!
	exit 1
fi
DB_PARAMETERS=""
if [ "${CONF_DB}" != "" ]; then
	DB_PARAMETERS=" --apprisdb-conf=${CONF_DB}"
fi

prepare_workspace "${APPRIS_WORKSPACE_LOG_DIR}"

# -----------------------------------------------------------------------------
# Log declarations
LOG_PARAMETERS=""
if [ "$LOG_LEVEL" != "" ]; then
	LOG_FILENAME="${APPRIS_WORKSPACE_LOG_DIR}/${FILENAME}.${SPECIES_ID}.log"
	LOG_PARAMETERS="--loglevel=${LOG_LEVEL} --logappend --logfile=${LOG_FILENAME}"
fi

# -----------------------------------------------------------------------------
# Run method
SCRIPT="${APPRIS_SCRIPTS_DIR}/${METHOD_SCRIPT}.pl"

# from a given list of genes
if [[ "${GENE_LIST}" != ""  || "${APPRIS_CHR_LIST}" == "" ]] ; then

		# print trace
		echo "================="
		echo "perl ${SCRIPT}"
		echo " --species="${APPRIS_SPECIES}""
		echo " --method=${METHOD}"
		echo " --output=${OUTPUT_FILENAME}"
		echo " ${DB_PARAMETERS}"
		echo " ${LOG_PARAMETERS}"
	
		# run method
		perl ${SCRIPT} \
			--species="${APPRIS_SPECIES}" \
			--method=${METHOD} \
			--output=${OUTPUT_FILENAME} \
			${DB_PARAMETERS} \
			${LOG_PARAMETERS}
		echo "================="

# for the whole genome chromsome by chromosome
else

	CHROMOSOME=(${APPRIS_CHR_LIST//,/ })
	INDEX=${#CHROMOSOME[@]}
	for ((i=0;i<$INDEX;i++)); do
	
		# local vars
		POSITION="${CHROMOSOME[${i}]}"
		OUTPUT_FILE="${OUTPUT_FILENAME}.${POSITION}.txt"
		
		# print trace
		echo "================="
		echo "perl ${SCRIPT}"
		echo " --species="${APPRIS_SPECIES}""
		echo " --position=${POSITION}"
		echo " --method=${METHOD}"
		echo " --output=${OUTPUT_FILE}"
		echo " ${DB_PARAMETERS}"
		echo " ${LOG_PARAMETERS}"
	
		# run method
		perl ${SCRIPT} \
			--species="${APPRIS_SPECIES}" \
			--position=${POSITION} \
			--method=${METHOD} \
			--output=${OUTPUT_FILE} \
			${DB_PARAMETERS} \
			${LOG_PARAMETERS}
		echo "================="
		
		# concatenate outputs
		echo "================="
		echo "cat ${OUTPUT_FILE} >> ${OUTPUT_FILENAME}"
		cat ${OUTPUT_FILE} >> ${OUTPUT_FILENAME}
		echo "================="
		
	done
	
fi